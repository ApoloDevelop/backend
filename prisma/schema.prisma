generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model album {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(255)
  release_date   DateTime?      @db.Date
  tracks_number  Int?           @default(0)
  user_score     Decimal?       @default(0.00) @db.Decimal(3, 2)
  verified_score Decimal?       @default(0.00) @db.Decimal(3, 2)
  item_id        Int
  item           item           @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "album_ibfk_1")
  album_artist   album_artist[]
  genre_album    genre_album[]
  track_album    track_album[]

  @@index([item_id], map: "item_id")
}

model album_artist {
  id_album  Int
  id_artist Int
  album     album  @relation(fields: [id_album], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "album_artist_ibfk_1")
  artist    artist @relation(fields: [id_artist], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "album_artist_ibfk_2")

  @@id([id_album, id_artist])
  @@index([id_artist], map: "id_artist")
}

model article {
  id             Int           @id @default(autoincrement())
  title          String        @db.VarChar(255)
  content        String        @db.Text
  author_id      Int
  published_date DateTime      @default(now()) @db.Timestamp(0)
  image_url      String?       @db.VarChar(255)
  views          Int?          @default(0)
  user           user          @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_ibfk_1")
  article_tag    article_tag[]
  comment        comment[]

  @@index([author_id], map: "author_id")
}

model article_tag {
  article_id Int
  tag_id     Int
  article    article @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_tag_ibfk_1")
  tag        tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_tag_ibfk_2")

  @@id([article_id, tag_id])
  @@index([tag_id], map: "tag_id")
}

model artist {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(100)
  biography      String?        @db.Text
  verified_score Decimal?       @default(0.00) @db.Decimal(3, 2)
  user_score     Decimal?       @default(0.00) @db.Decimal(3, 2)
  birthdate      DateTime?      @db.Date
  item_id        Int
  album_artist   album_artist[]
  item           item           @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "artist_ibfk_1")
  event_artist   event_artist[]
  genre_artist   genre_artist[]
  track_artist   track_artist[]

  @@index([item_id], map: "item_id")
}

model comment {
  id            Int             @id @default(autoincrement())
  article_id    Int
  user_id       Int
  parent_id     Int?
  content       String          @db.Text
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  status        comment_status? @default(active)
  article       article         @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_1")
  user          user            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_2")
  comment       comment?        @relation("commentTocomment", fields: [parent_id], references: [id], onUpdate: NoAction, map: "comment_ibfk_3")
  other_comment comment[]       @relation("commentTocomment")

  @@index([article_id], map: "article_id")
  @@index([parent_id], map: "parent_id")
  @@index([user_id], map: "user_id")
}

model event {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  date         DateTime       @db.DateTime(0)
  venue_id     Int?
  description  String?        @db.Text
  ticket_url   String?        @db.VarChar(255)
  venue        venue?         @relation(fields: [venue_id], references: [id], onUpdate: NoAction, map: "event_ibfk_1")
  event_artist event_artist[]

  @@index([venue_id], map: "venue_id")
}

model event_artist {
  event_id  Int
  artist_id Int
  event     event  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_artist_ibfk_1")
  artist    artist @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_artist_ibfk_2")

  @@id([event_id, artist_id])
  @@index([artist_id], map: "artist_id")
}

model favorite {
  id                       Int      @id @default(autoincrement())
  user                     Int
  item_id                  Int
  created_date             DateTime @default(now()) @db.Timestamp(0)
  user_favorite_userTouser user     @relation("favorite_userTouser", fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorite_ibfk_1")
  item                     item     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item_favorite")

  @@index([item_id], map: "fk_item_favorite")
  @@index([user], map: "user")
}

model follow {
  id                            Int      @id @default(autoincrement())
  seguidor_id                   Int
  seguido_id                    Int
  fecha_seguimiento             DateTime @default(now()) @db.Timestamp(0)
  user_follow_seguidor_idTouser user     @relation("follow_seguidor_idTouser", fields: [seguidor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follow_ibfk_1")
  user_follow_seguido_idTouser  user     @relation("follow_seguido_idTouser", fields: [seguido_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follow_ibfk_2")

  @@unique([seguidor_id, seguido_id], map: "seguidor_id")
  @@index([seguido_id], map: "seguido_id")
}

model genre {
  id             Int              @id @default(autoincrement())
  NAME           String           @db.VarChar(50)
  content        String?          @db.Text
  item_id        Int
  item           item             @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_ibfk_1")
  genre_album    genre_album[]
  genre_artist   genre_artist[]
  genre_subgenre genre_subgenre[]
  genre_track    genre_track[]

  @@index([item_id], map: "item_id")
}

model genre_album {
  genre_id Int
  album_id Int
  genre    genre @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_album_ibfk_1")
  album    album @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_album_ibfk_2")

  @@id([genre_id, album_id])
  @@index([album_id], map: "album_id")
}

model genre_artist {
  genre_id  Int
  artist_id Int
  genre     genre  @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_artist_ibfk_1")
  artist    artist @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_artist_ibfk_2")

  @@id([genre_id, artist_id])
  @@index([artist_id], map: "artist_id")
}

model genre_subgenre {
  genre_id    Int
  subgenre_id Int
  genre       genre    @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_subgenre_ibfk_1")
  subgenre    subgenre @relation(fields: [subgenre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_subgenre_ibfk_2")

  @@id([genre_id, subgenre_id])
  @@index([subgenre_id], map: "subgenre_id")
}

model genre_track {
  genre_id Int
  track_id Int
  genre    genre @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_track_ibfk_1")
  track    track @relation(fields: [track_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genre_track_ibfk_2")

  @@id([genre_id, track_id])
  @@index([track_id], map: "track_id")
}

model item {
  id            Int             @id @default(autoincrement())
  item_type     item_item_type
  item_id       Int
  album         album[]
  artist        artist[]
  favorite      favorite[]
  genre         genre[]
  review        review[]
  tag           tag[]
  track         track[]
  user_activity user_activity[]
  venue         venue[]

  @@unique([item_type, item_id], map: "item_type")
}

model review {
  id       Int     @id @default(autoincrement())
  user_id  Int
  score    Float
  verified Int     @default(0) @db.TinyInt
  text     String? @db.Text
  item_id  Int
  title    String? @db.TinyText
  item     item    @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item_review")
  user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "review_ibfk_1")

  @@index([item_id], map: "fk_item_review")
  @@index([user_id], map: "user_id")
}

model role {
  id   Int       @id @default(autoincrement())
  name role_name
  user user[]
}

model subgenre {
  id             Int              @id @default(autoincrement())
  NAME           String           @db.VarChar(50)
  genre_subgenre genre_subgenre[]
}

model tag {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(70)
  item_id     Int
  article_tag article_tag[]
  item        item          @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item_tag")

  @@index([item_id], map: "fk_item_tag")
}

model track {
  id             Int            @id @default(autoincrement())
  title          String         @db.VarChar(100)
  duration       Int?
  user_score     Decimal?       @default(0.00) @db.Decimal(3, 2)
  verified_score Decimal?       @default(0.00) @db.Decimal(3, 2)
  release_date   DateTime?      @db.Date
  item_id        Int
  genre_track    genre_track[]
  item           item           @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "track_ibfk_1")
  track_album    track_album[]
  track_artist   track_artist[]

  @@index([item_id], map: "item_id")
}

model track_album {
  track_id Int
  album_id Int
  track    track @relation(fields: [track_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "track_album_ibfk_1")
  album    album @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "track_album_ibfk_2")

  @@id([track_id, album_id])
  @@index([album_id], map: "album_id")
}

model track_artist {
  track_id  Int
  artist_id Int
  track     track  @relation(fields: [track_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "track_artist_ibfk_1")
  artist    artist @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "track_artist_ibfk_2")

  @@id([track_id, artist_id])
  @@index([artist_id], map: "artist_id")
}

model user {
  id                              Int             @id @default(autoincrement())
  fullname                        String          @db.VarChar(255)
  username                        String          @unique(map: "nombre_usuario") @db.VarChar(255)
  username_last_update            DateTime?       @db.Timestamp(0)
  email                           String          @unique(map: "correo") @db.VarChar(255)
  password                        String?         @db.VarChar(255)
  birthdate                       DateTime        @db.Date
  country                         String?         @db.VarChar(255)
  city                            String?         @db.VarChar(255)
  phone                           String?         @unique(map: "unique_phone") @db.VarChar(20)
  spotify_link                    String?         @db.VarChar(255)
  biography                       String?         @db.Text
  profile_pic                     String?         @db.VarChar(255)
  cover_pic                       String?         @db.VarChar(255)
  register_date                   DateTime        @default(now()) @db.Timestamp(0)
  verified                        Boolean         @default(false)
  role_id                         Int             @default(5)
  social_genre                    user_genre?
  article                         article[]
  comment                         comment[]
  favorite_favorite_userTouser    favorite[]      @relation("favorite_userTouser")
  follow_follow_seguidor_idTouser follow[]        @relation("follow_seguidor_idTouser")
  follow_follow_seguido_idTouser  follow[]        @relation("follow_seguido_idTouser")
  review                          review[]
  role                            role            @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")
  user_activity                   user_activity[]
  votes                           votes[]

  @@index([role_id], map: "user_type")
}

model user_activity {
  id        Int      @id @default(autoincrement())
  user_id   Int
  item_id   Int
  content   String?  @db.Text
  timestamp DateTime @default(now()) @db.DateTime(0)
  item      item     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item_activity")
  user      user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_activity_ibfk_1")
  votes     votes[]

  @@index([item_id], map: "fk_item_activity")
  @@index([user_id], map: "user_id")
}

model venue {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(255)
  location     String           @db.VarChar(255)
  capacity     Int?
  venue_type   venue_venue_type
  contact_info String?          @db.VarChar(255)
  website      String?          @db.VarChar(255)
  image        String?          @db.VarChar(255)
  item_id      Int
  event        event[]
  item         item             @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "venue_ibfk_1")

  @@index([item_id], map: "item_id")
}

model votes {
  user_id       Int
  post_id       Int
  timestamp     DateTime      @default(now()) @db.DateTime(0)
  user          user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "votes_ibfk_1")
  user_activity user_activity @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "votes_ibfk_2")

  @@id([user_id, post_id])
  @@index([post_id], map: "post_id")
}

enum item_item_type {
  track
  album
  artist
  venue
  genre
}

enum role_name {
  admin
  mod
  reader
  writer
  verified
}

enum venue_venue_type {
  stadium
  arena
  theater
  club
  outdoor
  other
}

enum comment_status {
  active
  deleted
}

enum user_genre {
  male
  female
  non_binary
  other
}
